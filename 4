function [y,ymatlab] = circ_convo(x,h)
N1=length(x);
N2=length(h);
N=max(N1,N2);       %for circular convolution
%N=N1+N2-1          %for linear convolution
x=[x, zeros(1,(N-N1))];
h=[h, zeros(1,(N-N2))];
y=zeros(1,N);
for n=1:N
    y(1,n)=0;
    for i=1:N
        j=n-i+1;
        if(j<=0)
            j=N+j;
        end
        y(1,n)=[y(1,n)+x(1,i)*h(1,j)];
    end
end
ymatlab=cconv(x,h,N);


function [y,ymatlab] = linear_convo(x,h)
N1=length(x);
N2=length(h);
%N=max(N1,N2);       %for circular convolution
N=N1+N2-1;            %for linear convolution
x=[x, zeros(1,(N-N1))];
h=[h, zeros(1,(N-N2))];
y=zeros(1,N);
for n=1:N
    y(1,n)=0;
    for i=1:N
        j=n-i+1;
        if(j<=0)
            j=N+j;
        end
        y(1,n)=[y(1,n)+x(1,i)*h(1,j)];
    end
end
ymatlab=cconv(x,h,N);


function [ylc,ymatlab] = cir_convo_using_linear(x,h)
N1=length(x);
N2=length(h);
%N=max(N1,N2);       %for circular convolution
N=N1+N2-1;            %for linear convolution
x=[x, zeros(1,(N-N1))];
h=[h, zeros(1,(N-N2))];
y=zeros(1,N);
for n=1:N
    y(1,n)=0;
    for i=1:N
        j=n-i+1;
        if(j<=0)
            j=N+j;
        end
        y(1,n)=[y(1,n)+x(1,i)*h(1,j)];
    end
end
ymatlab=cconv(x,h,N);

if N1>N2
    z=ymatlab(1,1:N1);
    A=ymatlab(1,N1+1:N);
    AA=[A, zeros(1,N1-N2+1)];
    ylc = z+AA;
end



function [y, ymatlab] = circ_convo_fft(x, h)
    N1 = length(x);
    N2 = length(h);
    N = max(N1, N2);  % Length for circular convolution
    
    % Zero-padding to make both sequences of length N
    x = [x, zeros(1, N-N1)];
    h = [h, zeros(1, N-N2)];
    
    % Compute DFT of both sequences
    X = fft(x, N);
    H = fft(h, N);
    
    % Element-wise multiplication in the frequency domain
    Y = X .* H;
    
    % Compute inverse DFT to get circular convolution
    y = ifft(Y, N);
    
    % Take only the real part (imaginary part should be negligible due to numerical precision)
    y = real(y);
    
    % For comparison, compute circular convolution using MATLAB's built-in function
    ymatlab = cconv(x, h, N);
end
